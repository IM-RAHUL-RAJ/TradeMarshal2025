pipeline {
    agent any
    
    environment {
        // Local Docker Registry (no push, just local build)
        DOCKER_REGISTRY = 'local'
        DOCKER_NAMESPACE = 'trademarshals'
        
        // Image Tags
        IMAGE_TAG = "${BUILD_NUMBER}-${GIT_COMMIT.take(8)}"
        LATEST_TAG = 'latest'
        
        // Docker Compose Network
        COMPOSE_PROJECT_NAME = "trademarshals-${BUILD_NUMBER}"
        
        // Service Names & Directories
        FRONTEND_DIR = 'frontend-trade-marshals'
        MIDTIER_DIR = 'midtier-trade-marshals'
        BACKEND_DIR = 'backend-trade-marshals'
        FMTS_DIR = 'fmts-backend'
        

    }
    
    tools {
        nodejs '18'
        maven '3.8'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üîÑ Checking out code from repository..."
                checkout scm
                
                script {
                    env.GIT_COMMIT = sh(
                        script: 'git rev-parse HEAD',
                        returnStdout: true
                    ).trim()
                    
                    // Initialize build tracking variables
                    env.SUCCESSFUL_BUILDS = ''
                    env.FAILED_BUILDS = ''
                    
                    echo "üìã Build Info:"
                    echo "  - Build Number: ${BUILD_NUMBER}"
                    echo "  - Git Commit: ${GIT_COMMIT.take(8)}"
                    echo "  - Image Tag: ${IMAGE_TAG}"
                }
            }
        }
        
        stage('Build Images Locally') {
            parallel {
                stage('Frontend Angular') {
                    steps {
                        script {
                            try {
                                dir("${FRONTEND_DIR}") {
                                    echo "üèóÔ∏è Building Angular Frontend locally..."
                                    
                                    def frontendImage = "${DOCKER_NAMESPACE}/frontend:${IMAGE_TAG}"
                                    
                                    // Build Docker image locally only
                                    sh "docker build -t ${frontendImage} ."
                                    
                                    env.SUCCESSFUL_BUILDS = (env.SUCCESSFUL_BUILDS ?: '') + "frontend,"
                                    echo "‚úÖ Frontend image built locally: ${frontendImage}"
                                }
                            } catch (Exception e) {
                                env.FAILED_BUILDS = (env.FAILED_BUILDS ?: '') + "frontend,"
                                echo "‚ùå Frontend build failed: ${e.getMessage()}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
                
                stage('Midtier Node.js') {
                    steps {
                        script {
                            try {
                                dir("${MIDTIER_DIR}") {
                                    echo "üèóÔ∏è Building Midtier Service locally..."
                                    
                                    def midtierImage = "${DOCKER_NAMESPACE}/midtier:${IMAGE_TAG}"
                                    
                                    // Build Docker image locally only
                                    sh "docker build -t ${midtierImage} ."
                                    
                                    env.SUCCESSFUL_BUILDS = (env.SUCCESSFUL_BUILDS ?: '') + "midtier,"
                                    echo "‚úÖ Midtier image built locally: ${midtierImage}"
                                }
                            } catch (Exception e) {
                                env.FAILED_BUILDS = (env.FAILED_BUILDS ?: '') + "midtier,"
                                echo "‚ùå Midtier build failed: ${e.getMessage()}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
                
                stage('Backend Spring Boot') {
                    steps {
                        script {
                            try {
                                dir("${BACKEND_DIR}") {
                                    echo "üèóÔ∏è Building Spring Boot Backend locally..."
                                    
                                    def backendImage = "${DOCKER_NAMESPACE}/backend:${IMAGE_TAG}"
                                    
                                    // Build with Maven
                                    sh "mvn clean package -DskipTests"
                                    
                                    // Build Docker image locally only
                                    sh "docker build -t ${backendImage} ."
                                    
                                    env.SUCCESSFUL_BUILDS = (env.SUCCESSFUL_BUILDS ?: '') + "backend,"
                                    echo "‚úÖ Backend image built locally: ${backendImage}"
                                }
                            } catch (Exception e) {
                                env.FAILED_BUILDS = (env.FAILED_BUILDS ?: '') + "backend,"
                                echo "‚ùå Backend build failed: ${e.getMessage()}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
                
                stage('FMTS Service') {
                    steps {
                        script {
                            try {
                                dir("${FMTS_DIR}") {
                                    echo "üèóÔ∏è Building FMTS Service locally..."
                                    
                                    def fmtsImage = "${DOCKER_NAMESPACE}/fmts:${IMAGE_TAG}"
                                    
                                    // Build Docker image locally only
                                    sh "docker build -t ${fmtsImage} ."
                                    
                                    env.SUCCESSFUL_BUILDS = (env.SUCCESSFUL_BUILDS ?: '') + "fmts,"
                                    echo "‚úÖ FMTS image built locally: ${fmtsImage}"
                                }
                            } catch (Exception e) {
                                env.FAILED_BUILDS = (env.FAILED_BUILDS ?: '') + "fmts,"
                                echo "‚ùå FMTS build failed: ${e.getMessage()}"
                                currentBuild.result = 'UNSTABLE'
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build Summary') {
            steps {
                script {
                    echo "üîç DEBUG: SUCCESSFUL_BUILDS = '${env.SUCCESSFUL_BUILDS}'"
                    echo "üîç DEBUG: FAILED_BUILDS = '${env.FAILED_BUILDS}'"
                    echo "üîç DEBUG: SUCCESSFUL_BUILDS length = ${env.SUCCESSFUL_BUILDS?.length()}"
                    
                    echo """
üìä BUILD SUMMARY:
‚úÖ Successful: ${env.SUCCESSFUL_BUILDS ?: 'none'}
‚ùå Failed: ${env.FAILED_BUILDS ?: 'none'}
"""
                    
                    if (!env.SUCCESSFUL_BUILDS || env.SUCCESSFUL_BUILDS.trim() == '') {
                        error("‚ùå All builds failed! Cannot proceed to deployment.")
                    }
                    
                    if (env.FAILED_BUILDS) {
                        echo "‚ö†Ô∏è Some builds failed, but continuing with successful services..."
                    }
                }
            }
        }
        
        stage('Generate Docker Compose') {
            when {
                expression { env.SUCCESSFUL_BUILDS }
            }
            steps {
                echo "üìù Generating docker-compose.yml with local images..."
                script {
                    def composeContent = """version: '3.8'

networks:
  trademarshals-network:
    driver: bridge

services:"""

                    // Add successful services to compose
                    if (env.SUCCESSFUL_BUILDS.contains('frontend')) {
                        composeContent += """
  frontend:
    image: ${DOCKER_NAMESPACE}/frontend:${IMAGE_TAG}
    container_name: trademarshals-frontend-${BUILD_NUMBER}
    ports:
      - "4200:80"
    networks:
      - trademarshals-network
    environment:
      - API_BASE_URL=http://localhost:4000/api/
    depends_on:
      - midtier
    restart: unless-stopped
"""
                    }

                    if (env.SUCCESSFUL_BUILDS.contains('midtier')) {
                        composeContent += """
  midtier:
    image: ${DOCKER_NAMESPACE}/midtier:${IMAGE_TAG}
    container_name: trademarshals-midtier-${BUILD_NUMBER}
    ports:
      - "4000:4000"
    networks:
      - trademarshals-network
    environment:
      - NODE_ENV=production
      - BACKEND_URL=http://backend:8080/
      - FRONTEND_URL=http://frontend:80/
    depends_on:
      - backend
      - fmts
    restart: unless-stopped
"""
                    }

                    if (env.SUCCESSFUL_BUILDS.contains('backend')) {
                        composeContent += """
  backend:
    image: ${DOCKER_NAMESPACE}/backend:${IMAGE_TAG}
    container_name: trademarshals-backend-${BUILD_NUMBER}
    ports:
      - "8080:8080"
    networks:
      - trademarshals-network
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - FMTS_URL=http://fmts:3000/fmts
    depends_on:
      - fmts
    restart: unless-stopped
"""
                    }

                    if (env.SUCCESSFUL_BUILDS.contains('fmts')) {
                        composeContent += """
  fmts:
    image: ${DOCKER_NAMESPACE}/fmts:${IMAGE_TAG}
    container_name: trademarshals-fmts-${BUILD_NUMBER}
    ports:
      - "3000:3000"
    networks:
      - trademarshals-network
    environment:
      - NODE_ENV=production
    restart: unless-stopped
"""
                    }
                    
                    writeFile file: 'docker-compose.yml', text: composeContent
                    echo "‚úÖ Generated docker-compose.yml with local images"
                }
            }
        }
        
        stage('Deploy with Docker Compose') {
            steps {
                echo "üöÄ Deploying services with Docker Compose..."
                script {
                    // Check Docker compose version and available options
                    sh "docker compose version || docker --version"
                    
                    // Set compose project name as environment variable
                    env.COMPOSE_PROJECT_NAME = "${COMPOSE_PROJECT_NAME}"
                    
                    // Stop any existing deployment
                    sh "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} docker compose down --remove-orphans || true"
                    
                    // Start services (no pull needed since images are local)
                    sh "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} docker compose up -d"
                    
                    // Wait for services to be ready
                    echo "‚è≥ Waiting for services to start..."
                    sleep(time: 30, unit: 'SECONDS')
                    
                    // Show running containers
                    sh "COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} docker compose ps"
                }
            }
        }
        
        stage('Health Check') {
            steps {
                echo "üîç Validating deployment..."
                script {
                    def services = env.SUCCESSFUL_BUILDS.split(',')
                    
                    for (service in services) {
                        if (!service) continue
                        
                        def port = ""
                        switch(service) {
                            case 'frontend': port = "4200"; break
                            case 'midtier': port = "4000"; break  
                            case 'backend': port = "8080"; break
                            case 'fmts': port = "3000"; break
                        }
                        
                        if (port) {
                            try {
                                sh "curl -f -s http://localhost:${port} > /dev/null"
                                echo "‚úÖ ${service} is healthy on port ${port}"
                            } catch (Exception e) {
                                echo "‚ö†Ô∏è ${service} health check failed on port ${port}"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deployment Summary') {
            steps {
                script {
                    def services = env.SUCCESSFUL_BUILDS.split(',').findAll { it }
                    
                    echo """
üéâ LOCAL DEPLOYMENT SUCCESSFUL! 

üìä Build Summary:
  - Build Number: ${BUILD_NUMBER}
  - Git Commit: ${GIT_COMMIT.take(8)}
  - Project Name: ${COMPOSE_PROJECT_NAME}

üåê Service URLs:"""

                    if (services.contains('frontend')) {
                        echo "  - Frontend:  http://localhost:4200"
                    }
                    if (services.contains('midtier')) {
                        echo "  - Midtier:   http://localhost:4000"
                    }
                    if (services.contains('backend')) {
                        echo "  - Backend:   http://localhost:8080"
                    }
                    if (services.contains('fmts')) {
                        echo "  - FMTS:      http://localhost:3000"
                    }

                    echo """
üê≥ Local Docker Images Built:"""
                    for (service in services) {
                        if (service) {
                            echo "  - ${DOCKER_NAMESPACE}/${service}:${IMAGE_TAG}"
                        }
                    }

                    echo """
üîß Management Commands:
  - View logs:     COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} docker compose logs -f
  - Stop services: COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME} docker compose down

‚úÖ All services are running locally!
"""
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up build artifacts..."
            script {
                echo """
üìä FINAL BUILD SUMMARY:
‚úÖ Successful builds: ${env.SUCCESSFUL_BUILDS ?: 'none'}
‚ùå Failed builds: ${env.FAILED_BUILDS ?: 'none'}
üöÄ Services running: Check docker ps for ${COMPOSE_PROJECT_NAME} containers
"""
            }
            
            // Archive docker-compose.yml
            script {
                if (fileExists('docker-compose.yml')) {
                    archiveArtifacts artifacts: 'docker-compose.yml', fingerprint: true
                }
            }
        }
        
        success {
            echo "‚úÖ Pipeline completed successfully!"
            echo "üåê Access your services at the URLs shown above"
        }
        
        failure {
            echo "‚ùå Pipeline failed!"
            script {
                echo "üîç Debugging info:"
                sh "docker ps -a | grep trademarshals || echo 'No trademarshals containers found'"
                
                // Show logs from failed containers
                sh """
                    for container in \$(docker ps -a -q --filter name=trademarshals-${BUILD_NUMBER} 2>/dev/null || true); do
                        echo "=== Logs for container \$container ==="
                        docker logs --tail=50 \$container || true
                    done
                """
            }
        }
    }
}
